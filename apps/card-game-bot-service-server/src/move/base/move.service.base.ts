/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Move as PrismaMove,
  Game as PrismaGame,
  Player as PrismaPlayer,
} from "@prisma/client";

export class MoveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MoveCountArgs, "select">): Promise<number> {
    return this.prisma.move.count(args);
  }

  async moves(args: Prisma.MoveFindManyArgs): Promise<PrismaMove[]> {
    return this.prisma.move.findMany(args);
  }
  async move(args: Prisma.MoveFindUniqueArgs): Promise<PrismaMove | null> {
    return this.prisma.move.findUnique(args);
  }
  async createMove(args: Prisma.MoveCreateArgs): Promise<PrismaMove> {
    return this.prisma.move.create(args);
  }
  async updateMove(args: Prisma.MoveUpdateArgs): Promise<PrismaMove> {
    return this.prisma.move.update(args);
  }
  async deleteMove(args: Prisma.MoveDeleteArgs): Promise<PrismaMove> {
    return this.prisma.move.delete(args);
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
